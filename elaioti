-- General Variables & Functions --
Players = game:GetService("Players")
Player = Players.LocalPlayer

-- Sharkx Variables & Functions --
Sharkx = {
    -- Init Sharkx Variables --
    isReach = false,
    curReach = "Spoof",
    damageAmp = false,
    reachMagnitude = Vector3.new(1, 0.800000011920929, 4),
    reachType = "Box",
    selBox = false,
    selBoxColor = Color3.fromRGB(0,0,0),

    cWalkspeed = 16,
    cJumppower = 50,
    cWalking = false,
    CFSpeed = 1.35,

    Autoclick = false,
    Spin = false
}

-- Function to interpolate between two CFrames
function Sharkx:Interpolate(part, targetCFrame, duration)
    return coroutine.wrap(function()
        local startTime = tick()
        local startCFrame = part.CFrame
        while tick() - startTime < duration do
            local elapsedTime = tick() - startTime
            local t = elapsedTime / duration
            local lerpedCFrame = startCFrame:Lerp(targetCFrame, t)
            local slerpedCFrame = CFrame.new(
                lerpedCFrame.Position,
                targetCFrame.Position
            ):lerp(lerpedCFrame, math.sin(t * math.pi * 0.5))

            part.CFrame = slerpedCFrame
            game:GetService("RunService").Heartbeat:Wait()
        end
        part.CFrame = targetCFrame
    end)
end

-- Function to wait for a child of a given object to be created
function Sharkx:WaitForChildOfClass(parents, className, timeout)
    local startTime = tick()
    timeout = timeout or 9e9
    while tick() - startTime < timeout do
        for _, parent in pairs(parents) do
            for _, child in pairs(parent:GetChildren()) do
                if child:IsA(className) then
                    return child
                end
            end
        end
        wait(0.01)
    end
    return nil
end

-- Function to spoof a property of an object
function Sharkx:Spoof(Instance, Property, Value)
    local b
    b = hookmetamethod(game, "__index", function(A, B)
        if not checkcaller() then
            if A == Instance then
                local filter = string.gsub(tostring(B), "\0", "")
                if filter == Property then
                    return Value
                end
            end
        end
        return b(A, B)
    end)
end

-- Function to disable a connection
function Sharkx:disableConnection(Connection)
    for i, v in pairs(getconnections(Connection)) do
        v:Disable()
    end
end

-- Function to get the player's sword
function Sharkx:getSword()
    return Sharkx:WaitForChildOfClass({Player.Character, Player.Backpack}, "Tool")
end

-- Function to get the hitbox of the player's sword
function Sharkx:getHitbox()
    for i,v in pairs(Sharkx:getSword():GetDescendants()) do
        if v:FindFirstChildOfClass("TouchTransmitter") then
            v.Massless = true
            return v
        end
    end
end

-- Function to enable reach
function Sharkx:doReach()
    Sharkx:getSword()
    Sharkx:disableConnection(Sharkx:getHitbox():GetPropertyChangedSignal("Size"))
    Sharkx:Spoof(Sharkx:getHitbox(), "Size", Vector3.new(1, 0.800000011920929, 4))
    Sharkx.isReach = true
    damageAmplification = Sharkx:getHitbox().Touched:Connect(function(part)
        if Sharkx.isReach == true and Sharkx.damageAmp == true and part.Parent:FindFirstChildOfClass
